---
apiVersion: v1
kind: Namespace
metadata:
  name: kafka-ca1
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: zookeeper-service
  name: zookeeper-service
  namespace: kafka-ca1
spec:
  type: NodePort
  ports:
  - name: zookeeper-port
    port: 2181
    # nodePort: 30181
    targetPort: 2181
  selector:
    app: zookeeper

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: zookeeper
  name: zookeeper
  namespace: kafka-ca1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - image: library/zookeeper:3.4.13
        imagePullPolicy: IfNotPresent
        name: zookeeper
        ports:
        - containerPort: 2181
        env:
        - name: ZOO_MY_ID
          value: "1"
---

apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: kafka-ca1
  labels:
    app: kafka
spec:
  ports:
  - port: 9092
    name: plaintext
  - port: 9999
    name: jmx
  clusterIP: None
  selector:
    app: kafka
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: kafka-ca1
spec:
  selector:
    matchLabels:
      app: kafka
  serviceName: "kafka"
  replicas: 3
  podManagementPolicy: OrderedReady
  template:
    metadata:
      labels:
        app: kafka # has to match .spec.selector.matchLabels
    spec:
      containers:
      - name: kafka
        image: wurstmeister/kafka:2.11-2.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9092
          name: plaintext
        - containerPort: 9999
          name: jmx
        env:
          - name: KAFKA_ADVERTISED_PORT
            value: "9092"
          - name: BROKER_ID_COMMAND
            value: "hostname | cut -d'-' -f2"
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: "zookeeper-service:2181"
          - name: KAFKA_LISTENERS
            value: "PLAINTEXT://:9092"
          - name: KAFKA_JMX_OPTS
            value: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.rmi.port=9999 -Djava.rmi.server.hostname=127.0.0.1"
          - name: JMX_PORT
            value: "9999"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-manager
  namespace: kafka-ca1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-manager
  template:
    metadata:
      labels:
        app: kafka-manager
    spec:
      containers:
      - name: kafka-manager
        image: sheepkiller/kafka-manager@sha256:615f3b99d38aba2d5fdb3fb750a5990ba9260c8fb3fd29c7e776e8c150518b78
        ports:
        - containerPort: 9000
        env:
        - name: ZK_HOSTS
          value: "zookeeper-service:2181"
---
kind: Service
apiVersion: v1
metadata:
  name: kafka-manager
  namespace: kafka-ca1
spec:
  type: NodePort
  selector:
    app: kafka-manager
  ports:
  - port: 9000
    protocol: TCP
    targetPort: 9000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-monitor-volume
  namespace: kafka-ca1
data:
  kafka-monitor.properties: |
    # Copyright 2016 LinkedIn Corp. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
    # file except in compliance with the License. You may obtain a copy of the License at
    #
    #    http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
    # an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    {
      "single-cluster-monitor": {
        "class.name": "com.linkedin.kmf.apps.SingleClusterMonitor",
        "topic": "kafka-monitor-topic-singlecluster",
        "zookeeper.connect": "zookeeper-service.kafka-ca1.svc.cluster.local:2181",
        "bootstrap.servers": "kafka-0.kafka.kafka-ca1.svc.cluster.local:9092,kafka-1.kafka.kafka-ca1.svc.cluster.local:9092,kafka-2.kafka.kafka-ca1.svc.cluster.local:9092",
        "produce.record.delay.ms": 100,
        "topic-management.topicCreationEnabled": true,
        "topic-management.replicationFactor": 2,
        "topic-management.partitionsToBrokersRatio": 2.0,
        "topic-management.rebalance.interval.ms": 600000,
        "topic-management.topicFactory.props": {},
        "topic-management.topic.props": {
          "retention.ms": "3600000"
        },
        "produce.producer.props": {
          "client.id": "kmf-client-id",
          "acks": "all",
          "retries": 3,
          "retry.backoff.ms": 1000
        },
        "consume.latency.sla.ms": "20000",
        "consume.consumer.props": {
            "group.id": "kafka-monitor-singlecluster-group-id"
          }
      },
      "jetty-service": {
        "class.name": "com.linkedin.kmf.services.JettyService",
        "jetty.port": 8000
      },
      "jolokia-service": {
        "class.name": "com.linkedin.kmf.services.JolokiaService"
      },
      "reporter-service": {
        "class.name": "com.linkedin.kmf.services.DefaultMetricsReporterService",
        "report.interval.sec": 1,
        "report.metrics.list": [
          "kmf:type=kafka-monitor:offline-runnable-count",
          "kmf.services:type=produce-service,name=*:produce-availability-avg",
          "kmf.services:type=consume-service,name=*:consume-availability-avg",
          "kmf.services:type=produce-service,name=*:records-produced-total",
          "kmf.services:type=consume-service,name=*:records-consumed-total",
          "kmf.services:type=consume-service,name=*:records-lost-total",
          "kmf.services:type=consume-service,name=*:records-duplicated-total",
          "kmf.services:type=consume-service,name=*:records-delay-ms-avg",
          "kmf.services:type=produce-service,name=*:records-produced-rate",
          "kmf.services:type=produce-service,name=*:produce-error-rate",
          "kmf.services:type=consume-service,name=*:consume-error-rate"
        ]
      }
    }
  log4j.properties: |
    # Copyright 2016 LinkedIn Corp. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
    # file except in compliance with the License. You may obtain a copy of the License at
    #
    #    http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
    # an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    log4j.rootLogger=INFO, stdout
    log4j.appender.stdout=org.apache.log4j.ConsoleAppender
    log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
    log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n
    log4j.appender.kafkaClientAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.kafkaClientAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.kafkaClientAppender.File=${kafka.logs.dir}/kafka-client.log
    log4j.appender.kafkaClientAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.kafkaClientAppender.layout.ConversionPattern=[%d] %p %m (%c)%n
    log4j.logger.com.linkedin.kmf.core.KafkaMonitor=INFO, stdout
    log4j.additivity.com.linkedin.kmf.core.KafkaMonitor=false
    log4j.logger.org.apache.kafka=WARN, kafkaClientAppender
    log4j.additivity.org.apache.kafka=false
    log4j.logger.kafka=WARN, kafkaClientAppender
    log4j.additivity.kafka=false
---
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: multi-cluster-monitor-volume
  namespace: kafka-ca1
data:
  multi-cluster-monitor.properties: |
    # Copyright 2016 LinkedIn Corp. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
    # file except in compliance with the License. You may obtain a copy of the License at
    #
    #    http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
    # an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    {
      "multi-cluster-monitor": {
        "class.name": "com.linkedin.kmf.apps.MultiClusterMonitor",
        "topic": "kafka-monitor-topic-multicluster",
        "produce.service.props": {
          "zookeeper.connect": "zookeeper-service.kafka-ca1.svc.cluster.local:2181",
          "bootstrap.servers": "kafka-0.kafka.kafka-ca1.svc.cluster.local:9092,kafka-1.kafka.kafka-ca1.svc.cluster.local:9092,kafka-2.kafka.kafka-ca1.svc.cluster.local:9092",
          "produce.record.delay.ms": 100,
          "produce.producer.props": {
            "client.id": "kafka-monitor-client-id",
            "acks": "all",
            "retries": 3,
            "retry.backoff.ms": 1000
          }
        },
        "consume.service.props": {
          "zookeeper.connect": "zookeeper-service.kafka-ca2.svc.cluster.local:2181",
          "bootstrap.servers": "kafka-0.kafka.kafka-ca2.svc.cluster.local:9092,kafka-1.kafka.kafka-ca2.svc.cluster.local:9092,kafka-2.kafka.kafka-ca2.svc.cluster.local:9092",
          "consume.latency.sla.ms": "20000",
          "consume.consumer.props": {
            "group.id": "kafka-monitor-multicluster-group-id"
          }
        },
        "topic.management.props.per.cluster": {
          "first-cluster": {
            "zookeeper.connect": "zookeeper-service.kafka-ca1.svc.cluster.local:2181",
            "topic-management.topicCreationEnabled": true,
            "topic-management.replicationFactor": 1,
            "topic-management.partitionsToBrokersRatio": 2.0,
            "topic-management.rebalance.interval.ms": 600000,
            "topic-management.topicFactory.props": {}
          },
          "last-cluster": {
            "zookeeper.connect": "zookeeper-service.kafka-ca2.svc.cluster.local:2181",
            "topic-management.topicCreationEnabled": true,
            "topic-management.replicationFactor": 1,
            "topic-management.partitionsToBrokersRatio": 2.0,
            "topic-management.rebalance.interval.ms": 600000,
            "topic-management.topicFactory.props": {}
          }
        }
      },
      "reporter-service": {
        "class.name": "com.linkedin.kmf.services.DefaultMetricsReporterService",
        "report.interval.sec": 1,
        "report.metrics.list": [
          "kmf.services:type=produce-service,name=*:produce-availability-avg",
          "kmf.services:type=consume-service,name=*:consume-availability-avg",
          "kmf.services:type=produce-service,name=*:records-produced-total",
          "kmf.services:type=consume-service,name=*:records-consumed-total",
          "kmf.services:type=consume-service,name=*:records-lost-total",
          "kmf.services:type=consume-service,name=*:records-duplicated-total",
          "kmf.services:type=consume-service,name=*:records-delay-ms-avg",
          "kmf.services:type=produce-service,name=*:records-produced-rate",
          "kmf.services:type=produce-service,name=*:produce-error-rate",
          "kmf.services:type=consume-service,name=*:consume-error-rate"
        ]
      },
      "jetty-service": {
        "class.name": "com.linkedin.kmf.services.JettyService",
        "jetty.port": 8000
      },
      "jolokia-service": {
        "class.name": "com.linkedin.kmf.services.JolokiaService"
      }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-monitor
  annotations:
  labels:
    app: kafka-monitor
spec:
  ports:
  - protocol: TCP
    port: 9999
    targetPort: 9999
  selector:
    app: kafka-monitor
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-monitor
  namespace: kafka-ca1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-monitor
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: kafka-monitor
    spec:
      automountServiceAccountToken: false
      containers:
      - name: kafka-monitor
        image: d1egoaz/docker-kafka-monitor@sha256:307e59f9db70a34ab659a5714010a805440b65d1b948cb79f6564a4567ca0f2c
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 256m
            memory: 500Mi
          requests:
            cpu: 256m
        volumeMounts:
          - name: kafka-monitor-volume
            mountPath: /opt/kafka-monitor/config/
      volumes:
        - name: kafka-monitor-volume
          configMap:
            name: kafka-monitor-volume

    
